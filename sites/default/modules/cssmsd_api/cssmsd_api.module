<?php

/**
 * Implements hook_menu().
 */
function cssmsd_api_menu() {
  $items = array();

  $items['api/user_login'] = array(
    'title' => t('Ajax API user login'),
    'page callback' => '_user_login_api',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['api/mother_list'] = array(
    'title' => t('Ajax API crown'),
    'page callback' => '_mother_list_api',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['api/crown'] = array(
    'title' => t('Ajax API crown'),
    'page callback' => '_crown_api',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['admin/config/cssmsd/prize'] = array(
    'title' => 'CSSMSD Lucky Set',
    'description' => 'Configure required settings for Lucky',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cssmsd_api_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'cssmsd_api.pages.inc',
  );

  $items['api/test'] = array(
    'title' => t('Ajax API testing'),
    'page callback' => '_test',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 *
 * User Login API
 *
 *
 */
function _user_login_api() {

	global $user;

	if(!$user->uid) {
		$tracking_key = _tracking_key_generate();
		$account = db_query('SELECT 1 FROM {users} WHERE name = :username', array(':username' => $tracking_key))->fetchField();
		if(!$account) {
			// organize user data
			$edit = array();
			$edit['name'] = $tracking_key;
			$edit['mail'] = $edit['init'] = $tracking_key . '@fake.com';
			$edit['status'] = 1;
			$edit['access'] = REQUEST_TIME;
			$user = user_save(NULL, $edit);
			user_login_finalize();  	
		}
	}
}

 /**
 * test
 */
 function _test() {
	//_mother_list_api();
 	//_retrieve_store_lat_long();
 }

/**
 *
 * Get mother list
 *
 *
 */
function _mother_list_api() {

	$fields = array('method' => 'GET');

	_input_validation_and_format($fields);

	$bundle = 'chowssmsd_monther_type';

	$condition = array(
		'bundle' => $bundle,
		'orderby' => array('field_chowssmsd_monther_weight', 'ASC'),
		);

	$results = _node_query($condition);

	$output = _mother_output_format($results);

	print json_encode(array('status' => 1, 'data' => $output)); //success

}

/**
 *
 * Crown API
 *
 * @return status
 *
 */
function _crown_api() {

	$fields = array('method' => 'GET');

	_input_validation_and_format($fields);

	$bundle = 'chowssmsd_crown_record';

	$condition = array(
		'bundle' => $bundle,
		'condition' => array(
			'field_chowssmsd_crown_recipient' => array('target_id' => $recipient), 
			'field_chowssmsd_crown_part' => array('target_id' => $user->uid),
			),
		);
	$results = _node_query($condition);

	if($results) 
		_print_status('011'); //already crowned
	else
		$counts = _create_crown_record($recipient);	


	if(count($counts)%2 == 0)
		_push_wechat_message($recipient);

	print json_encode(array('status' => 1, 'counts' => $counts)); //success

}

/**
 *
 * Fomat mother data
 *
 * @param $nid
 * @return json
 *
 */
function _mother_output_format($nids) {

	$output = array();

	foreach($nids as $nid) {
		$data = new stdClass();
		$node = node_load($nid);
		$data->mother_nid = $node->nid;
		$data->name = $node->title;
		$data->description = $node->body[LANGUAGE_NONE][0]['value'];
		$data->pic_thumbnail = image_style_url('cssmsd_mother_pic_s', $node->field_chowssmsd_monther_pic[LANGUAGE_NONE][0]['uri']);

	 	$item_ids = $node->field_chowssmsd_monther_jewel[LANGUAGE_NONE];
	 	$jewel_nids = array();
	 	foreach($item_ids as $item_id) {
	 		$item = field_collection_item_load($item_id['value']);
	 		$nid = $item->field_chowssmsd_jewel_name[LANGUAGE_NONE][0]['target_id'];
	 		$jewel_nids[] = $nid;
	 	}

		$data->jewel = _jewel_output_format($jewel_nids);
		$output[] = $data;
	}

	return $output;

}

/**
 *
 * Fomat Jewel data
 *
 * @param $nid
 * @return json
 *
 */
function _jewel_output_format($nids) {

	$output = array();

	foreach($nids as $nid) {
		$data = new stdClass();
		$node = node_load($nid);
		$data->jewel_nid = $node->nid;
		$data->name = $node->title;
		$data->pic_thumbnail = image_style_url('cssmsd_jewel_pic_thumb', $node->field_chowssmsd_jewel_pic[LANGUAGE_NONE][0]['uri']);
		$output[] = $data;
	}

	return $output;

}

/**
 *
 * Push the message to wechat
 *
 * @param $recipient
 *
 */
function _push_wechat_message($recipient) {


}

/**
 *
 * Create crown record
 *
 * @return crown count
 *
 */
function _create_crown_record($recipient) {

	global $user;

	if($recipient == $user->uid)
		_print_status('010'); //can not crown by yourself

	$node = new stdClass();
	node_object_prepare($node);
	$node->type = $bundle;
	$node->language = LANGUAGE_NONE;
	$node->status = 0;
	$node->title = $recipient;
	$node->field_chowssmsd_crown_recipient[LANGUAGE_NONE][0]['target_id'] = $recipient;
	$node->field_chowssmsd_crown_part[LANGUAGE_NONE][0]['target_id'] = $user->uid;
	node_save($node);

	$condition = array(
		'bundle' => $bundle,
		'condition' => array(
			'field_chowssmsd_crown_recipient' => array('target_id' => $recipient), 
			),
		);
	$results = _node_query($condition);

	return count($results);	

}

/**
 *
 * Node query
 * 
 * @param condition array
 * @return nids array
 *
 */
function _node_query($condition) {

	$query = new EntityFieldQuery;
	$property = array('title', 'created');

	if(isset($condition['bundle'])){
		$query->entityCondition('entity_type', 'node');
		$query->entityCondition('bundle', $condition['bundle']);
		$query->propertyCondition('status', 0);

		if(isset($condition['condition'])) {

			foreach($condition['condition'] as $field => $value) {

				if(in_array($field, $property))
					$query->propertyCondition('title', $value);

				if(isset($value['target_id']))
					$query->fieldCondition($field, 'target_id', $value['target_id'], '=');

				if(isset($value['value']))
					$query->fieldCondition($field, 'value', $value['value'], '=');
			}
		}


		if(isset($condition['orderby'])){
			
			if(in_array($condition['orderby'][0], $property))
				$query->propertyOrderBy($condition['orderby'][0], $condition['orderby'][1]);
			else 
				$query->fieldOrderBy($condition['orderby'][0], 'value', $condition['orderby'][1]);

		}

		$results = $query->execute();

		if($results) {
			$nids = array_keys($results['node']);
			return $nids;
		}
	}

	return array();

}

 /**
  *
  * Format the input data and return the format data
  *
  * @return object
  *
  */
 function _input_validation_and_format($fields) {

 	global $user;

 	if(!$user->uid)
 		_print_status('001'); //not login

 	if(!isset($fields['method']) || !in_array($fields['method'], array('POST', 'GET')))
 		_print_status('002'); //The method must be set

 	if($fields['method'] == 'POST' && $_SERVER['REQUEST_METHOD'] !== 'POST')
 		_print_status('003'); //wrong request method

 	if($fields['method'] == 'GET' && $_SERVER['REQUEST_METHOD'] !== 'GET')
 		_print_status('003'); //wrong request method

 	if($fields['method'] == 'POST') {
	 	foreach($fields as $field => $type) {

	 		$value = $_POST[$field];

	 		if($type == 'notnull' && empty($value))
	          return _print_status('999'); //unknow error

	        if($type == 'date' && !strtotime($value))
	          return _print_status('999'); //unknow error

	        if($type == 'file' && !file_load($value))
	          return _print_status('999'); //unknow error
	 	}
 	}


 }


 /**
  *
  * Format the output status
  *
  * @param sting
  *
  */
 function _print_status($code) {
 	$arr = array('status' => $code);
 	print json_encode($arr);
 	exit;
 }

 /**
  *
  * Get prize by nid
  *
  * @param $nid
  * @return term
  *
  */
 function _get_prize_by_nid($nid) {
 	//get the entity prize tid
 	$item_ids = node_load($nid)->field_chowssmsd_store_prize[LANGUAGE_NONE];
 	$prizes = array();
 	
 	foreach($item_ids as $item_id) {
 		$item = field_collection_item_load($item_id['value']);
 		$tid = $item->field_chowssmsd_prize_name[LANGUAGE_NONE][0]['tid'];
 		$quantity = $item->field_chowssmsd_prize_quantity[LANGUAGE_NONE][0]['value'];
 		$used = _get_prize_used_quantity($nid, $tid);
 		if($used < $quantity) {
 			$prizes[] = $tid;
 		}
 	}

 	//get the coupon prize tid
	$virtual_tid = array_shift(taxonomy_get_term_by_name('Virtual'))->tid;
	$virtual_prizes = taxonomy_get_children($virtual_tid);
	
	foreach($virtual_prizes as $prize) {
		if(_get_virtual_prize_quantity($prize->tid) > 0)
			$prizes[] = $prize->tid;
	}

	$probability = split('/', variable_get('cssmsd_api_prize_probability', NULL));

	//return the prize tid by probability
	if(mt_rand(0, $probability[1]) <= $probability[0]) {
		$random_index = array_rand($prizes, 1);
		$prize_tid = $prizes[$random_index];
		return $prize_tid;
	}

	$prize_tid = array_shift(taxonomy_get_term_by_name('门店200元优惠券'))->tid;

	return $prize_tid;

 }

 /**
  *
  * Check prize by LBS
  *
  * @param latitude, $longitude
  * @return code
  *
  */
 function _show_prize_by_lbs() {
 	$latitude = $_POST['data']['latitude'];
 	$longitude = $_POST['data']['longitude'];
	$node = _get_nearest_store($latitude, $longitude);

	

 }

 /**
  *
  * Get prize number which has been used
  *
  * @param $nid, $tid
  * @return number string
  *
  */
 function _get_prize_used_quantity($nid, $tid) {
 	return 1;
 }

 /**
  *
  * Get number of virtual prize
  *
  * @param $tid
  * @return number string
  *
  */
 function _get_virtual_prize_quantity($tid) {
 	return 100;
 }
 /**
  *
  * Create winning record
  *
  * @param 
  * @return 
  *
  */
 function _create_winning_record() {

	

 }

 /**
  *
  * Get nearest store by latitude and longitude
  *
  * @param latitude, $longitude
  * @return nid
  *
  */
 function _get_nearest_store($latitude, $longitude) {
	$nodes = node_load_multiple(array(), array('type' => 'chowssmsd_stores'));
	$store = array();
	foreach($nodes as $node){
		$latitude_end = $node->field_chowssmsd_store_latitude[LANGUAGE_NONE][0]['value'];
		$longitude_end = $node->field_chowssmsd_store_longitude[LANGUAGE_NONE][0]['value'];
		$store[$node->nid] = _get_distance_between_points($latitude, $longitude, $latitude_end, $longitude_end);
	}
	asort($store);
 	$nids = array_keys($store);
 	$nid = reset($nids);
 	return $nid;

 }

 /**
  *
  * Get distance between points by latitude and longitude
  *
  * @param $latitude1, $longitude1, $latitude2, $longitude2
  * @return array
  *
  */
function _get_distance_between_points($latitude1, $longitude1, $latitude2, $longitude2) {
    $theta = $longitude1 - $longitude2;
    $miles = (sin(deg2rad($latitude1)) * sin(deg2rad($latitude2))) + (cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * cos(deg2rad($theta)));
    $miles = acos($miles);
    $miles = rad2deg($miles);
    $miles = $miles * 60 * 1.1515;
    $meters = $kilometers * 1000;
    return $meters;
}

 /**
  *
  * Generate tracking key.
  *
  * @param 
  * @return uuid
  *
  */
function _tracking_key_generate() {

	global $user;

	$expire_days = 360;

	if(isset($_COOKIE['_ddmstkey'])) 
		return $_COOKIE['_ddmstkey'];

	$tracking_key = uuid_generate();
	setcookie('_ddmstkey', $tracking_key, time() + 3600 * 24 * $expire_days, '/');
	return $tracking_key;

}

